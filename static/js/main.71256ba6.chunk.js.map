{"version":3,"sources":["components/Loading.js","components/Error.js","components/CountryStatus.js","components/Dropdown.js","containers/App.js","serviceWorker.js","index.js"],"names":["Loading","type","color","className","height","width","Error","error","message","CountryStatus","country","status","Dropbox","data","onSelect","classNamePrefix","placeholderClassName","options","onChange","placeholder","App","onCountrySelect","setState","selectedCountry","fetchStatistics","state","this","fetchCountries","catch","_fetchCountries","a","fetch","headers","response","json","result","log","length","countries","sort","lhs","rhs","Country","map","c","label","value","Slug","calculateGrowth","growth","count","statistics","groupBy","prop","processed","reduce","rv","x","Object","values","acc","curr","prev","push","formatDate","date","rawMonth","getMonth","rawDate","getDate","month","day","year","getFullYear","toDate","Date","fromDate","setDate","params","_fetchStatistics","then","s","g","ib","title","obj","console","Dropdown","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71256ba6.chunk.js","sourcesContent":["import React from 'react'\nimport ReactLoading from 'react-loading'\n\nfunction Loading() {\n  return (\n    <ReactLoading\n      type='spinningBubbles'\n      color='#555555'\n      className='center mv3'\n      height='32px'\n      width='32px' />\n  )\n}\n\nexport default Loading;","import React from 'react';\n\nconst Error = ({ error }) => {\n  return (\n    <h2 className='error-color i'>\n      Oops. An error has occured ü§∑üèª‚Äç‚ôÄÔ∏è<br />{error.message}\n    </h2>)\n}\n\nexport default Error;\n","import React from 'react'\nimport Loading from './Loading'\nimport Error from './Error'\n\nconst CountryStatus = ({ country, status, error }) => {\n  //no country selected\n  if (!country) { return null }\n  //error fetching status\n  if (error) { return <Error error={error} /> }\n  //loading status\n  if (status === null) { return <Loading /> }\n  //status received\n  switch (status) {\n    case true:\n      return <h1 className='f1 pos-color'>YES</h1>\n    default:\n      return <h1 className='f1 neg-color'>NO</h1>\n  }\n}\n\nexport default CountryStatus;","import React from 'react'\nimport Select from 'react-select'\nimport Error from './Error'\nimport Loading from './Loading';\n\nconst Dropbox = ({ data, onSelect, error }) => {\n  if (!data && error) {\n    return <Error error={error} />\n  }\n  if (!data) {\n    return <Loading />\n  }\n  return (\n    <Select\n      className='tl mw7 mt4 center black-color'\n      classNamePrefix='react-select'\n      placeholderClassName='black-color'\n      options={data}\n      onChange={onSelect}\n      placeholder=\"Select a country\"\n    />\n  )\n\n}\n\nexport default Dropbox;","import React, { Component } from 'react';\nimport '../style/App.css';\nimport CountryStatus from '../components/CountryStatus'\nimport Dropdown from '../components/Dropdown'\nimport 'tachyons'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {}\n  }\n\n  componentDidMount() {\n    this.fetchCountries().catch(error => this.setState({ error: error }))\n  }\n\n  async fetchCountries() {\n    async function _fetchCountries() {\n      const response = await fetch('https://api.covid19api.com/countries', {\n        headers: { 'Access-Control-Allow-Origin': '*' }\n      })\n      return response.json()\n    }\n\n    const result = await _fetchCountries()\n    this.log('countries', result)\n    if (result.length === 0) {\n      throw new Error('Unable to retrieve countries')\n    }\n\n    this.setState({\n      countries: result\n        .sort((lhs, rhs) => {\n          if (lhs.Country > rhs.Country) {\n            return 1\n          }\n          if (lhs.Country < rhs.Country) {\n            return -1\n          }\n          return 0\n        })\n        .map(c => {\n          return {\n            label: c.Country,\n            value: c.Slug\n          }\n        })\n    })\n  }\n\n  async fetchStatistics(country) {\n    async function _fetchStatistics(country) {\n      const formatDate = function (date) {\n        //getMonth() range is [0:11]\n        const rawMonth = date.getMonth() + 1\n        const rawDate = date.getDate()\n        const month = (rawMonth < 10 && `0${rawMonth}`) || rawMonth\n        const day = (rawDate < 10 && `0${rawDate}`) || rawDate\n        const year = date.getFullYear()\n        return `${year}-${month}-${day}T00:00:00Z`\n      }\n\n      const toDate = new Date()\n      const fromDate = new Date(toDate)\n      //3 days back\n      fromDate.setDate(toDate.getDate() - 3)\n      //fetch confirmed cases\n      const params = `from=${formatDate(fromDate)}&to=${formatDate(toDate)}`\n      const response = await fetch(`https://api.covid19api.com/country/${country.value}/status/confirmed?${params}`, {\n        headers: { 'Access-Control-Allow-Origin': '*' }\n      })\n      return response.json()\n    };\n\n    function calculateGrowth(statistics) {\n      var reduceProperty = function (xs, groupBy, prop) {\n        return xs.reduce(function (rv, x) {\n          rv[x[groupBy]] = rv[x[groupBy]] || 0\n          rv[x[groupBy]] += x[prop];\n          return rv;\n        }, {});\n      };\n      const processed = reduceProperty(statistics, 'Date', 'Cases')\n      return Object.values(processed)\n        .reduce((acc, curr) => {\n          if (acc.prev === 0) {\n            acc.prev = curr\n            return acc\n          }\n          //growth in percent\n          acc.growth.push((curr - acc.prev) / curr)\n          acc.prev = curr\n          return acc\n        }, {\n          growth: [],\n          prev: 0\n        }).growth\n    }\n\n    function status(growth) {\n      if (growth.count < 2) {\n        throw new Error('Unable to retrieve statistics')\n      }\n\n      return growth[1] < growth[0]\n    }\n\n    const result = _fetchStatistics(country)\n    if (result.length === 0) {\n      throw new Error('Unable to retrieve statistics')\n    }\n\n    result\n      .then(s => this.log('statistics', s))\n      .then(calculateGrowth)\n      .then(g => this.log('growth', g))\n      .then(status)\n      .then(ib => this.log('status', ib))\n      .catch(error => this.setState({ error: error }))\n      .then(result => {\n        this.setState({ status: result })\n      });\n  }\n\n  log(title, obj) {\n    console.log(title, obj)\n    return obj\n  }\n\n  onCountrySelect = (country) => {\n    this.setState({\n      selectedCountry: country,\n      status: null\n    })\n    this.fetchStatistics(country)\n  }\n\n  render() {\n    const {\n      countries,\n      selectedCountry,\n      status,\n      error } = this.state\n    return (\n      <div className='main tc mt5 pl3 pr3'>\n        <header className='f2'>Are things getting better in your country?</header>\n        <Dropdown\n          data={countries}\n          onSelect={this.onCountrySelect}\n          error={error}\n        />\n        <CountryStatus\n          country={selectedCountry}\n          status={status}\n          error={error}\n        />\n        <p className='f3 fw4'>\n          Do the news regarding COVID-19 situation\n          in the world make you anxious, sad or intimidated,\n          while the only information you've been looking is to know if the situation has improved? <br /><br />\n          Then this site is for you. It produces an answer based on a daily statistics.\n          </p>\n        <footer className='mv5'>\n          For more information check <a href='https://www.worldometers.info/coronavirus/'>Corona Virus Updates</a> for your country\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}